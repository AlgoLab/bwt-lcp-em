types = ['giab', 'random']
#types = ['giab']
sizes = [1, 2, 4, 8, 16, 32]
#sizes = [16]
#programs = ['ble', 'beetl2', 'egap',  'beetl', 'egsa']
programs = ['beetl']
tmpfiles = 'beetl*output* data/*.fasta.???* bin/tests/*/* *.* data/tmp/* data/partition/* tests/*/*'
timelimit = '50h'
time_cmd = f'/usr/bin/time --verbose /usr/bin/timeout  -s 9 {timelimit}'

#types = ['giab', 'random', 'GA1', 'ion_exome']
from psutil import virtual_memory

ram = virtual_memory().total  # total physical memory available
memory = int(min(ram * 0.9 / (1024 ** 2), 4096))

rule all:
    input:
        expand("log/{type}/{size}/{program}/time.txt",
               type = types, size = sizes, program = programs)

rule ble_pre:
    output:
        "tests/arrays/.placeholder",
        "tests/BWT/.placeholder",
        "tests/supportBWT/.placeholder",
        "tests/supportLists/.placeholder",
        "tests/supportLCP/.placeholder",
    shell:
        "touch {output}"

rule ble_lcp:
    input:
        "data/{type}-{size}.fasta.gz",
    output:
        "log/{type}/{size}/ble/time.txt"
    log:
        "log/{type}/{size}/ble/log.txt"
    benchmark:
        "log/{type}/{size}/ble/benchmark.txt"
    shell:
        "rm -f {tmpfiles} && {time_cmd} bin/ble {input} > {log} 2> {output}"


rule beetl2_lcp:
    input:
        "data/{type}-{size}.fasta"
    output:
        "log/{type}/{size}/beetl2/time.txt"
    log:
        "log/{type}/{size}/beetl2/log.txt"
    benchmark:
        "log/{type}/{size}/beetl2/benchmark.txt"
    shell:
        "rm -f {tmpfiles} && {time_cmd} bin/BCR_LCP_GSA {input} beetl2output 0 > {log} 2> {output}"


rule egap_lcp:
    input:
        "data/{type}-{size}.fasta"
    output:
        "log/{type}/{size}/egap/time.txt"
    log:
        "log/{type}/{size}/egap/log.txt"
    benchmark:
        "log/{type}/{size}/egap/benchmark.txt"
    shell:
        "rm -f {tmpfiles} && {time_cmd} bin/eGap -m {memory} {input} > {log} 2> {output}"


rule egsa_lcp:
    input:
        "data/{type}-{size}.fasta"
    output:
        "log/{type}/{size}/egsa/time.txt"
    log:
        "log/{type}/{size}/egsa/log.txt"
    benchmark:
        "log/{type}/{size}/egsa/benchmark.txt"
    shell:
        "rm -f {tmpfiles} && {time_cmd} bin/egsa {input} 0 > {log} 2> {output}"


rule beetl_lcp:
    input:
        "data/{type}-{size}.fasta"
    output:
        real = "log/{type}/{size}/beetl/time.txt"
    log:
        "log/{type}/{size}/beetl/log.txt"
    shell:
        "rm -f {tmpfiles} && {time_cmd} bin/beetl-bwt -i {input} -o beetloutput --output-format=ascii --generate-lcp > {log} 2> {output.real}"


rule create_test_dirs:
    output:
        "{dir}/.placeholder"
    shell:
        "touch {output}"

rule cpok:
    # Sometimes cp fails to transfer the entire file
    input:
        orig = "/home/gianluca/Documenti/AlgoLab/datasets/BWT+LCP/lcp/input/{type}/{type}-{size}.fasta.gz",
        dest = "data/{type}-{size}.fasta.gz"
    output:
        temp("data/{type}-{size}.fasta.gz.ok")
    shell:
        "test -s {input.dest} || rm -f {input.orig}; test -s {input.dest} && touch {output}"

rule fastagz:
    input:
        "/home/gianluca/Documenti/AlgoLab/datasets/BWT+LCP/lcp/input/{type}/{type}-{size}.fasta.gz"
    output:
        temp("data/{type}-{size}.fasta.gz")
    shell: "rm -f {tmpfiles} && rsync {input} {output}"

rule fasta:
    input:
        f = "data/{type}-{size}.fasta.gz",
#        t = "data/{type}-{size}.fasta.gz.ok"
    output:
        temp("data/{type}-{size}.fasta")
    shell: "rm -f {tmpfiles} && gunzip -k {input.f}"
